{
    "Template for codeforces CP" : {
        "prefix": "cft",
        "body":[
            "import java.util.*;",
            "import java.io.*;",

            "public class Main {",
                "private static FastScanner sc = new FastScanner();",

                "private static void solve() {",
                    "$0",
                "}",

                "static class FastScanner {",
                    "BufferedReader br;",
                    "StringTokenizer st;",

                    "public FastScanner() {",
                        "try {",
                            "br = new BufferedReader(new FileReader(\"input.txt\"));",
                            "PrintStream out = new PrintStream(new FileOutputStream(\"output.txt\"));",
                            "System.setOut(out);",
                        "} catch(Exception e) {",
                            "br = new BufferedReader(new InputStreamReader(System.in));",
                        "}",
                    "}",
                    "String next() {",
                        "while (st == null || !st.hasMoreElements()) {",
                            "try {",
                                "st = new StringTokenizer(br.readLine());",
                            "} catch (IOException e) {",
                                "e.printStackTrace();",
                            "}",
                        "}",
                        "return st.nextToken();",
                    "}",

                    "String nextLine() {",
                        "String str = \"\";",
                        "try {",
                            "str = br.readLine();",
                        "} catch (IOException e) {",
                            "e.printStackTrace();",
                        "}",
                        "return str;",
                    "}",
                    
                    "int nextInt() { return Integer.parseInt(next()); }",
                    
                    "long nextLong() { return Long.parseLong(next()); }",
                    
                    "double nextDouble() { return Double.parseDouble(next()); }",
                "}",

                "public static void main(String[] args) {",
                    "int T = sc.nextInt();",
                    "for (int t = 1; t <= T; ++t) {",
                        "if (t > 1) System.out.println();",
                        "solve();",
                    "}",
                "}",
            "}"
        ],
        "description": "template for codeforces cp in java"
    },
    "Template for baekjoon online judge CP" : {
        "prefix": "bojt",
        "body":[
            "import java.util.*;",
            "import java.io.*;",

            "public class Main {",
                "private static FastScanner sc = new FastScanner();",

                "private static void solve() {",
                    "$0",
                "}",

                "static class FastScanner {",
                    "BufferedReader br;",
                    "StringTokenizer st;",

                    "public FastScanner() {",
                        "try {",
                            "br = new BufferedReader(new FileReader(\"input.txt\"));",
                            "PrintStream out = new PrintStream(new FileOutputStream(\"output.txt\"));",
                            "System.setOut(out);",
                        "} catch(Exception e) {",
                            "br = new BufferedReader(new InputStreamReader(System.in));",
                        "}",
                    "}",
                    "String next() {",
                        "while (st == null || !st.hasMoreElements()) {",
                            "try {",
                                "st = new StringTokenizer(br.readLine());",
                            "} catch (IOException e) {",
                                "e.printStackTrace();",
                            "}",
                        "}",
                        "return st.nextToken();",
                    "}",

                    "String nextLine() {",
                        "String str = \"\";",
                        "try {",
                            "str = br.readLine();",
                        "} catch (IOException e) {",
                            "e.printStackTrace();",
                        "}",
                        "return str;",
                    "}",
                    
                    "int nextInt() { return Integer.parseInt(next()); }",
                    
                    "long nextLong() { return Long.parseLong(next()); }",
                    
                    "double nextDouble() { return Double.parseDouble(next()); }",
                "}",

                "public static void main(String[] args) {",
                    "int T = sc.nextInt();",
                    "for (int t = 1; t <= T; ++t) {",
                        "if (t > 1) System.out.println();",
                        "System.out.print(\"Case #\" + t + \": \");",
                        "solve();",
                    "}",
                "}",
            "}"
        ],
        "description": "template for baekjoon online judge cp in java"
    },
    "For loop": {
        "prefix": "forl",
        "body": [
            "for (int i= 0; i < $0; ++i)"
        ],
        "description": "simple for loop"
    },
    "Print": {
        "prefix": "print",
        "body": [
            "System.out.print($0);"
        ],
        "description": "simple print method"
    },
    "Print Line": {
        "prefix": "printl",
        "body": [
            "System.out.println($0);"
        ],
        "description": "simple print line method"
    },
    "Next Permutation": {
        "prefix": "permu",
        "body": [
            "static class Permu {",
                "int[] nextPermutation(int[] arr) {",
                    "int n = arr.length;",
                    "int[] ret = new int[n];",
                    "for (int i = 0; i < n; ++i)",
                    "ret[i] = arr[i];",
                    "int pivot = n - 1;",
                    "while (pivot > 0 && ret[pivot - 1] >= ret[pivot])",
                    "--pivot;",
                    "if (pivot > 0) {",
                        "--pivot;",
                        "int idx = n - 1;",
                        "while (ret[idx] <= ret[pivot])",
                        "--idx;",
                        "swap(ret, pivot, idx);",
                        "reverse(ret, pivot + 1, n - 1);",
                    "} else {",
                        "Arrays.sort(ret);",
                    "}",
                    "return ret;",
                "}",
                
                "void swap(int[] arr, int a, int b) {",
                    "int tmp = arr[a];",
                    "arr[a] = arr[b];",
                    "arr[b] = tmp;",
                "}",
                
                "void reverse(int[] arr, int l, int r) {",
                    "int[] buf = new int[r - l + 1];",
                    "for (int i = l; i <= r; ++i)",
                        "buf[i - l] = arr[r - (i - l)];",
                    "for (int i = 0; i < r - l + 1; ++i)",
                        "arr[l + i] = buf[i];",
                "}",
            "}"
        ],
        "description": "next permutation implementation in java"
    },
    "Trie": {
        "prefix": "trie",
        "body": [
            "static class TrieNode {",
                "char val;",
                "boolean exist;",
                "Map<Character, TrieNode> children;",
                
                "TrieNode(char val) {",
                    "this.val = val;",
                    "children = new HashMap<>();",
                "}",
                
                "char getVal() {",
                    "return val;",
                "}",
                
                "void setVal(char val) {",
                    "this.val = val;",
                "}",
                
                "void addChild(TrieNode node) {",
                    "children.put(node.getVal(), node);",
                "}",
                
                "TrieNode getChild(char c) {",
                    "return children.get(c);",
                "}",
                
                "boolean findWord(String word) {",
                    "if (word.length() == 0)",
                        "return exist;",
                    "if (!children.containsKey(word.charAt(0)))",
                        "return false;",
                    "return children.get(word.charAt(0)).findWord(word.substring(1));",
                "}",
                
                "void addWord(String word) {",
                    "if (word.length() == 0) {",
                        "exist = true;",
                        "return;",
                    "}",
                    "TrieNode child = children.get(word.charAt(0));",
                    "if (child == null) {",
                        "addChild(new TrieNode(word.charAt(0)));",
                        "child = children.get(word.charAt(0));",
                    "}",
                    "child.addWord(word.substring(1));",
                "}",
            "}"
        ],
        "description": "trie data structure"
    }
}